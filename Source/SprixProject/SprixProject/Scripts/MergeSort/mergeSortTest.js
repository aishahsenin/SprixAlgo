// AISHAH'S MERGE SORT CODE
// Below is the actual merge sort function
function mergeBox(index, value, origin) {
    this.index = index;
    this.value = value;
    this.origin = origin;
}

var mergeBox1 = new mergeBox(1, 4, 0);
var mergeBox2 = new mergeBox(2, 3, 0);
var mergeBox3 = new mergeBox(3, 2, 0);
var mergeBox4 = new mergeBox(4, 1, 0);
var mergeBox5 = new mergeBox(5, 0, 0);

var mergeBoxArray = [mergeBox1, mergeBox2, mergeBox3, mergeBox4, mergeBox5];

function retrieveValuesMerge() {
    // empty array
    var array = [];

    // get no. of index
    var noOfIndex = parseInt(document.getElementById('noOfIndex').value);

    for (i = 1; i <= noOfIndex; i++) {
        var a = parseInt(document.getElementById('index_' + i).value);

        var tempMergeBox = new mergeBox(i, a, 0);

        array.push(tempMergeBox);
    }
    return array;
}

$(document).ready(function () {
    console.log("MERGE LOADED");
});

function start() {
    console.log("THE START");
    // input array
    var array = retrieveValuesMerge();

    //console.log(array);

    for (i = 0; i < array.length; i++) {
        console.log("ARRAY Index: " + array[i].index + ", Value: " + array[i].value);
    }
    mergeSort(array);

    console.log("THE END");
}

/* 
the merge sort function
the purpose of this function is to take an array, finds the middle, and slices it
once it's done that, it executes the merge function, with its parameters generated by recursing itself with the left and right values
*/
function mergeSort(arr) {
    if (arr.length < 2) {
        //console.log("MERGESORT FINISHb");
        return arr;
    }

    console.log("MERGESORT");

    // finds the middle of the given array
    var middle = parseInt(arr.length / 2);

    // slices the array into halves, forming left and right arrays
    var left = arr.slice(0, middle);
    console.log(left);
    var right = arr.slice(middle, arr.length);
    console.log(right);
    // TODO; TIMEOUT FOR ANIMATION HERE

    console.log("MERGESORT FINISH");
    var temp = setTimeout(function () { mergeSort(left); }, 1000);
    var temp2 = setTimeout(function () { mergeSort(right); }, 1000);

    console.log("dicks");

    return merge(temp, temp2);
    //return merge(mergeSort(left), mergeSort(right));
}

/*
task is to merge 2 arrays, left and right, together
note, before merging though, it checks on index 0 on both the arrays to check which array has the larger value
*/
function merge(left, right) {
    console.log("MERGE");

    var result = [];

    while (left.length && right.length) {
        // if left is less or equal to right
        if (left[0].value <= right[0].value) {
            result.push(left.shift());
            // TODO; TIMEOUT FOR ANIMATION HERE
        } else {
            // else if left is more than right
            result.push(right.shift());
            // TODO; TIMEOUT FOR ANIMATION HERE
        }
    }
    var i = 0
    // might need to do animation below, idk.
    while (left.length) {
        console.log(left[i]);
        result.push(left.shift());
        i++;
    }

    while (right.length) {
        console.log(right[i]);
        result.push(right.shift());
        i++;
    }

    console.log(result);
    console.log("MERGE FINISH");

    //return setTimeout(function () { result }, 1000);
    return result;
}

function downShift(left, right) {
    console.log("SHIFTING");

    for (i = 0; i < left.length; i++) {
        $("#index" + (left[i].index)).animate({ top: "30px" }, 1000);
        $("#index" + (left[i].index)).animate({ left: "-15px" }, 1000);
    }

    for (i = 0; i < right.length; i++) {
        $("#index" + (right[i].index)).animate({ top: "30px" }, 1000);
        $("#index" + (right[i].index)).animate({ left: "15px" }, 1000);
    }
}