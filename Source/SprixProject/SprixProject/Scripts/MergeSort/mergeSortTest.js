// AISHAH'S MERGE SORT CODE
// Below is the actual merge sort function

function start() {
    // input array
    var a = [4, 76, 3, 6, 23, 84, 90, 54, 23, 5];
    console.log(a);
    mergeSort(a);
}

/* 
the merge sort function
the purpose of this function is to take an array, finds the middle, and slices it
once it's done that, it executes the merge function, with its parameters generated by recursing itself with the left and right values
*/
function mergeSort(arr) {

    console.log("merge sort function invoked");

    if (arr.length < 2)
        return arr;

    // finds the middle of the given array
    var middle = parseInt(arr.length / 2);

    // slices the array into halves, forming left and right arrays
    var left = arr.slice(0, middle);
    console.log(left);
    var right = arr.slice(middle, arr.length);
    console.log(right);
    // TODO; TIMEOUT FOR ANIMATION HERE

    return merge(mergeSort(left), mergeSort(right));
}

/*
task is to merge 2 arrays, left and right, together
note, before merging though, it checks on index 0 on both the arrays to check which array has the larger value
*/
function merge(left, right) {

    console.log("merge function invoked");

    var result = [];

    while (left.length && right.length) {
        // if left is less or equal to right
        if (left[0] <= right[0]) {
            result.push(left.shift());
            // TODO; TIMEOUT FOR ANIMATION HERE
        } else {
            // else if left is more than right
            result.push(right.shift());
            // TODO; TIMEOUT FOR ANIMATION HERE
        }
    }

    // might need to do animation below, idk.
    while (left.length)
        result.push(left.shift());

    while (right.length)
        result.push(right.shift());

    console.log(result);

    return result;
}